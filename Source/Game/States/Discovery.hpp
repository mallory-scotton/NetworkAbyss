///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Core/State.hpp>
#include <Engine/Network/Network.hpp>
#include <Engine/Network/ServerDiscovery.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd::States
///////////////////////////////////////////////////////////////////////////////
namespace tkd::States
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Discovery : public Base
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Vector<Address> m_addresses;        //<!
    ServerDiscovery m_discovery;        //<!
    sf::RectangleShape m_shape;         //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void init(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaT
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void update(float deltaT) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void render(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param mouse
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void handleEvent(
        const sf::Event::MouseButtonPressed& mouse
    ) override;
};

} // namespace tkd::States
