///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Inputs/InputBinding.hpp>
#include <Engine/Inputs/GameAction.hpp>
#include <Engine/Utils/Singleton.hpp>
#include <Engine/Utils/Types.hpp>
#include <SFML/Window.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class InputManager : public Singleton<InputManager>
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    UMap<GameAction, Vector<UPtr<InputBinding>>> m_bindings;
    Array<bool, sf::Joystick::Count> m_controllers = {false};

public:
    InputManager(void);

private:
    void setupDefaultBindings(void);
    void setupControllerBindings(Uint32 id);
    void onControllerConnected(Uint32 id);
    void onControllerDisconnected(Uint32 id);

public:
    void update(void);
    bool isActionPressed(GameAction action) const;
    bool isActionJustPressed(GameAction action) const;
    bool isActionJustReleased(GameAction action) const;
    Vec2f getActionAnalogValue(GameAction action) const;
    void bindAction(GameAction action, UPtr<InputBinding> binding);
};

} // namespace tkd
