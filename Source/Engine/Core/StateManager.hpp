///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Core/State.hpp>
#include <Engine/Core/Renderer.hpp>
#include <Engine/Utils/Singleton.hpp>
#include <SFML/Graphics.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd::States
///////////////////////////////////////////////////////////////////////////////
namespace States
{

///////////////////////////////////////////////////////////////////////////////
// Pre-definition of the base state class
///////////////////////////////////////////////////////////////////////////////
class Base;

} // namespace tkd::States

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class StateManager : public Singleton<StateManager>
{
public:
    using State = UPtr<States::Base>;

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Stack<State> m_states;              //<!
    Renderer* m_renderer;               //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    StateManager(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void push(State state);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void pop(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void change(State state);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void handleEvents(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void handlePackets(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaT
    ///
    ///////////////////////////////////////////////////////////////////////////
    void update(float deltaT);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void render(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool empty(void) const;
};

} // namespace tkd
