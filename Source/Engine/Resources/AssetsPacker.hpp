///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Utils/Types.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <SFML/System.hpp>
#include <zlib.h>
#include <iostream>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
/// \brief Assets packer class to handle assets
///
///////////////////////////////////////////////////////////////////////////////
class AssetsPacker
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Type
    {
        Image,                              //<!
        Sound,                              //<!
        Font,                               //<!
        Data,                               //<!
        Unknown                             //<!
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Assets
    {
        Data data;                          //<!
        Uint64 originalSize;                //<!
        Uint64 compressedSize;              //<!
        Type type;                          //<!
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    UMap<String, Assets> m_assets;          //<!
    int m_compressionLevel;                 //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static const char* ASSETS_SIGNATURE;    //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param compressionLevel
    ///
    ///////////////////////////////////////////////////////////////////////////
    AssetsPacker(int compressionLevel = Z_DEFAULT_COMPRESSION);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param entry
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    AssetsPacker& operator<<(const Pair<String, Path>& entry);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param filepath
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static Type getType(const Path& filepath);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param size
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static String formatSize(Uint64 size);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param filename
    ///
    ///////////////////////////////////////////////////////////////////////////
    void pack(const String& filename) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param filename
    ///
    ///////////////////////////////////////////////////////////////////////////
    void unpack(const String& filename);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param key
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Optional<SPtr<sf::Image>> getImage(const String& key) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param key
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Optional<SPtr<sf::Texture>> getTexture(const String& key) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param key
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Optional<SPtr<sf::SoundBuffer>> getSound(const String& key) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param key
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Optional<SPtr<sf::Font>> getFont(const String& key) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param key
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Optional<SPtr<Data>> getData(const String& key) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param key
    /// \param filepath
    ///
    ///////////////////////////////////////////////////////////////////////////
    void addAsset(const String& key, const Path& filepath);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    UMap<String, Assets> getAssets(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void clear(void);
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param os
/// \param packer
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
std::ostream& operator<<(std::ostream& os, const AssetsPacker& packer);

} // namespace tkd
